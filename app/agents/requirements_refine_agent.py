from app.services.llm_call_service import call_gpt
from typing import Dict, Any, Optional

# === 5. 에이전트 2: 요구사항 명명, 분류 및 상세 설명 추가 ===
def name_classify_describe_requirements_agent(
    requirement_sentence: str,
    source_chunk_text: str,
    page_number: int, # 입력 파라미터는 page_number로 유지 (RFP 값으로 사용됨)
) -> Optional[Dict[str, Any]]:
    system_prompt = """
    당신은 시스템 분석 전문가입니다. 주어진 '요구사항 핵심 문장'과 해당 문장이 포함된 '원본 청크' 및 '페이지 번호'를 분석하여 다음 **7가지 필드**를 포함하는 JSON 객체를 생성합니다:

    1.  "요구사항명": '요구사항 핵심 문장'의 핵심 내용을 명사 형태의 간결한 제목으로 표현합니다. (예: "사용자 인증 기능", "데이터 암호화 백업 체계")
    2.  "type": 요구사항의 유형을 다음 중 하나로 분류합니다.
        * "기능": 시스템이 사용자에게 제공해야 하는 구체적인 동작이나 서비스, 또는 개발자가 직접 코드로 구현해야 하는 시스템의 행위.
        * "비기능": 시스템의 품질 속성(성능, 보안, 사용성, 안정성, 확장성 등), 운영 환경, 기술 제약 조건, 법규 준수, 유지보수 관련 사항 등 기능 외적인 요소.
    3.  "요구사항 상세설명": '요구사항 핵심 문장'을 확장하여, 요구사항의 구체적인 내용, 목적, 범위 등을 2-4개의 명확하고 완전한 문장으로 상세히 기술합니다. 전체적으로 일관된 입도와 상세 수준을 유지하십시오.
    4.  "대상업무": 이 요구사항이 반영되어야 하는 주요 대상 업무 또는 시스템의 특정 모듈을 명시합니다. 개발자 중심의 기능 영역, 관련된 화면 명칭, 시스템 모듈 등을 '원본 청크' 내용을 참조하여 명사형 문장 1개로 기술합니다. 원본 청크에 정보가 부족하면, 요구사항의 성격에 기반하여 가장 가능성이 높은 대상 업무를 추론하여 기술하십시오. 전체적으로 일관된 입도와 상세 수준을 유지하십시오.
    5.  "요건처리 상세": 요구사항의 주요 구현 방안, 핵심 기술적 고려사항, 데이터 처리 흐름, 또는 중요한 관리적 측면을 '원본 청크' 내용을 바탕으로 기술합니다. 만약 원본 청크에 구체적인 내용이 명시되어 있지 않거나 부족하더라도, 요구사항의 성격과 일반적인 시스템 구축 모범 사례(Best Practice)를 고려하여, 2~3가지의 창의적이고 구체적인 처리 방안, 기술적 제안, 또는 예상되는 주요 관리 포인트를 전문적인 식견으로 상세히 제시하십시오. 예를 들어, 특정 기술 스택(예: 마이크로서비스 아키텍처, 특정 프로그래밍 언어/프레임워크, 클라우드 서비스 활용), 개발 방법론(예: 애자일, DevOps), 데이터 관리 전략(예: 데이터 거버넌스, 데이터 품질 관리), 보안 강화 조치(예: 시큐어 코딩, 정기적 취약점 점검), 테스트 및 QA 전략, 사용자 교육 및 지원 계획 등을 포함할 수 있습니다. 항상 긍정적이고 실행 가능한 관점에서 구체적으로 기술하며, 명확하고 완전한 문장으로 서술하여 일관된 입도를 유지하십시오. "정보 없음"과 같은 소극적인 답변 대신 적극적으로 내용을 구성하십시오.
    6.  "RFP": 해당 제공된 '페이지 번호'를 숫자 형태로 그대로 기입합니다.
    7.  "출처 문장": 해당 제공된 '요구사항 핵심 문장'을 문자열 형태로 그대로 기입합니다.

    반드시 위 7개 필드를 모두 포함하는 단일 JSON 객체로만 응답해야 하며, 다른 설명은 포함하지 마십시오.
    요구사항이 모호하거나 너무 광범위하다고 판단되면, "요구사항명"을 가능한 가장 구체적인 단위로 정의하고 각 설명 필드("요구사항 상세설명", "대상업무", "요건처리 상세")를 명확히 하십시오.

    예시 입력 ('user_prompt'에 해당):
    요구사항 핵심 문장: "모든 사용자 데이터는 AES-256 알고리즘을 사용하여 암호화되어야 합니다."
    원본 청크: "시스템 보안은 매우 중요합니다. 개인정보보호법을 준수하기 위해, 모든 사용자 데이터는 AES-256 알고리즘을 사용하여 암호화되어야 합니다. 암호화 키는 안전하게 별도로 관리되어야 하며, 정기적인 키 교체가 이루어져야 합니다. 이는 데이터 유출 시 피해를 최소화하기 위함입니다. 데이터베이스 접근 시에는 별도의 인증 절차를 거치며, 모든 접근 기록은 로그로 관리됩니다."
    페이지 번호: 15

    예시 JSON 출력 (당신의 응답):
    {
      "요구사항명": "사용자 데이터 AES-256 암호화 적용 및 키 관리 강화",
      "type": "비기능",
      "요구사항 상세설명": "개인정보보호법 및 관련 규제 준수를 위해 시스템 내에 저장, 처리, 전송되는 모든 사용자 식별 가능 정보(PII) 및 민감 데이터는 국제 표준 암호화 알고리즘인 AES-256 또는 그 이상의 수준으로 암호화되어야 합니다. 이를 통해 데이터 유출 및 오용으로부터 사용자의 정보를 보호하고 데이터의 기밀성, 무결성을 보장하는 것을 최우선 목적으로 합니다.",
      "대상업무": "사용자 정보 저장 및 관리 모듈",
      "요건처리 상세": "암호화 구현 시, 성능 영향을 최소화하기 위해 암호화 대상 데이터 필드를 명확히 정의하고, 필요에 따라 필드 레벨 또는 풀 디스크 암호화(Full Disk Encryption) 방식을 검토합니다. 암호화 키 관리는 FIPS 140-2 인증을 받은 HSM(Hardware Security Module) 또는 클라우드 제공사의 KMS(Key Management Service)를 활용하여 중앙 집중적이고 안전하게 수행해야 합니다. 정기적인 키 회전(Key Rotation) 정책을 수립하고 자동화하며, 모든 키 관리 작업에 대한 감사 로그를 철저히 기록 및 관리합니다. 또한, 개발 단계부터 시큐어 코딩 가이드라인을 준수하고, 암호화 로직에 대한 충분한 테스트 및 코드 검토를 수행하여 안정성을 확보합니다.",
      "RFP": 15,
      "출처 문장": "모든 사용자 데이터는 AES-256 알고리즘을 사용하여 암호화되어야 합니다."
    }
    """
    user_prompt = f"""
    다음 정보를 분석하여 위 가이드라인에 따라 7개 필드를 포함하는 JSON 객체를 생성해주십시오:

    요구사항 핵심 문장: "{requirement_sentence}"
    원본 청크: "{source_chunk_text}"
    페이지 번호: {page_number}
    """
    result_json = call_gpt(system_prompt, user_prompt, is_json_output=True)

    # 결과 검증 시 새로운 필드 목록 확인
    expected_keys = ["요구사항명", "type", "요구사항 상세설명", "대상업무", "요건처리 상세", "RFP", "출처 문장"]
    if isinstance(result_json, dict) and all(key in result_json for key in expected_keys):
        # 각 설명 필드가 문자열인지 간단히 확인 (선택적)
        if not all(isinstance(result_json[key], str) for key in ["요구사항 상세설명", "대상업무", "요건처리 상세"]):
            print(f"경고: 일부 설명 필드가 문자열이 아닐 수 있습니다. 결과: {result_json}")
            # 그래도 일단 반환, 더 엄격하게 하려면 여기서 None 반환
        return result_json
    else:
        print(f"경고: 요구사항 문장 '{requirement_sentence[:50]}...'에 대한 분석 결과를 올바른 JSON 형식(7개 필드 포함)으로 받지 못했습니다. 결과: {result_json}")
        return None